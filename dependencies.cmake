FIND_PACKAGE(CURL)

if (CURL_FOUND)
  INCLUDE_DIRECTORIES("${CURL_INCLUDE_DIR}")
else()
  MESSAGE(FATAL_ERROR "Could not find CURL")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake-modules/")

FIND_PACKAGE(LibPThread REQUIRED)
INCLUDE_DIRECTORIES("${LIBPTHREAD_INCLUDE_DIRS}")

FIND_PACKAGE(SQLite REQUIRED)
INCLUDE_DIRECTORIES("${SQLITE_INCLUDE_DIR}")

FIND_PACKAGE(LibreSSL REQUIRED)
INCLUDE_DIRECTORIES("${LibreSSL_INCLUDE_DIR}")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif(NOT CMAKE_BUILD_TYPE)

# Was going to pass in -Weffc++ but it blindly tells you to initialise fields in an
# initialiser list, even when it's more readable to initialise it in the constructor
# body.
SET(COMMON_FLAGS "-std=c++14 -Wall -Wpedantic -Wextra -Werror -fno-builtin")
SET(COMMON_FLAGS_C "-std=c11 -Wall -Wpedantic -Wextra -Werror -fno-builtin")

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${COMMON_FLAGS} -O2 -g")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${COMMON_FLAGS} -O3 -ffat-lto-objects -flto")
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${COMMON_FLAGS_C} -O2 -g")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${COMMON_FLAGS_C} -O3 -ffat-lto-objects -flto")
SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} -ffat-lto-objects -flto -Wno-error")
SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
SET(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")
